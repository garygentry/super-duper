write a rust program with the following requirements:

1. use diesel for file processing
2. we will be iterating all rows from a table named dupe_file with the following schema:
CREATE TABLE IF NOT EXISTS public.dupe_file
(
    id integer NOT NULL DEFAULT nextval('dupe_file_id_seq'::regclass),
    canonical_name text NOT NULL,
    file_size bigint NOT NULL,
    CONSTRAINT dupe_file_pkey PRIMARY KEY (id)
)
3. we will be populating an empty table named path_paths with the following schema:
CREATE TABLE IF NOT EXISTS public.path_part
(
    id integer NOT NULL DEFAULT nextval('path_part_id_seq'::regclass),
    canonical_name text NOT NULL,
    size bigint NOT NULL,
    name text text NOT NULL, 
    parent_id integer NULL,
    part_type integer NOT NULL,
    CONSTRAINT dupe_file_pkey PRIMARY KEY (id)
)
4. canonical_name contains abolute path to a windows file (containing a drive letter) in the form: "\\?\D:\Data\Setups\Drivers\ASUS Maximus V Extreme\Drivers\VGA\XP\winxp64\Graphics\lang\cs-CZ\license.txt"
5. canonical_name will always start with the string \\?\
6. the drive letter will always follow \\?\ and be in the form D:, E:, etc.
7. the objective is to iterate over each record in dupe_files, and insert/update a record in path_part for EACH path component of canonical_name
	a. path_part.name will be the path or folder base name
	b. path_part.part_type should be 0 for a drive part, 1 for a folder part, and 3 for a file part
	c. path_part.parent_id will be a reference/foreign key into the path_part.id of the parent folder (or NULL if the part is a drive)
	d. size will be the file_size of the record is a file, and will be the cumulative size of all child files for folder or drives
	e. canonical name will be the absolute path to the part
8. it will be necessary to, for each record in dupe_file, split the path components of the and recurse over each components, query for existence of the subpath and insert if not exist to get the id to be used as parent_id for child entries.  
9. it will also be necessary to recurese with file size values to cumulate file size for parent folder/drives

EXAMPLE:
INPUT: dupe_file table example				
canonical_name	file_size			
\\?\D:\Parent1\Child\File1.txt	100			
\\?\D:\Parent1\Child2\File2.txt	150			
\\?\D:\Parent2\Child2\File3.txt	300			
\\?\C:\Parent3\Child2\File4.txt	200			
				
				
OUTPUT: path_part table example				
id	canonical_name	name	size	parent_folder_id
1	\\?\D:\	D	550	<NULL>
2	\\?\D:\Parent1\	Parent1	250	1
3	\\?\D:\Parent1\Child	Child	100	2
4	\\?\D:\Parent1\Child\File1.txt	File1.txt	100	3
5	\\?\D:\Parent1\Child2	Child2	450	2
6	\\?\D:\Parent1\Child2\File2.txt	File2.txt	150	5
7	\\?\D:\Parent2\	Parent2	300	1
8	\\?\D:\Parent2\Child2	Child2	300	7
9	\\?\D:\Parent2\Child2\File3.txt	File3.txt	300	8
10	\\?\C:\	C	200	<NULL>
11	\\?\C:\Parent3\	Parent3	200	10
12	\\?\C:\Parent3\Child2	Child2	200	11
13	\\?\C:\Parent3\Child2\File4.txt	File4.txt	200	12


Think step by step and generate a rust program with requirements above

